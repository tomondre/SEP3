@page "/providers"
@using GrpcFileGeneration.Models
@using ClientBlazor.Models
@using ClientBlazor.Services.Providers
@using ProviderList = ClientBlazor.Models.Orders.ProviderList
@inject NavigationManager NavigationManager
@inject IProviderService ProviderService
@attribute [Authorize(Roles = "administrator")]



<div class="py-6">
    @if (providers.Content == null)
    {
        <p class="text-center">
            <em>Loading...</em>
        </p>
    }
    else if (!providers.Content.Providers.Any())
    {
        <p class="text-center">
            <em>No providers currenlty exist. Please add some.</em>
        </p>
    }
    else
    {
        <section class="">
            <div class="container px-4 mx-auto">
                <div class="my-2 lg:flex lg:w-auto lg:space-x-10">
                    <div class="lg:flex items-center mr-auto pl-4 border rounded">
                        <button class="mr-2 text-gray-200 hover:text-gray-300" @onclick="FetchFilteredProviders">
                            <svg class="h-5 w-5" viewBox="0 0 21 21" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M20.7 19.3L17 15.6C20.1 11.7 19.5 6 15.6 2.9C11.7 -0.2 5.99999 0.5 2.89999 4.3C-0.200006 8.2 0.499995 13.9 4.29999 17C7.59999 19.6 12.3 19.6 15.6 17L19.3 20.7C19.7 21.1 20.3 21.1 20.7 20.7C21.1 20.3 21.1 19.7 20.7 19.3ZM9.99999 17C6.09999 17 2.99999 13.9 2.99999 10C2.99999 6.1 6.09999 3 9.99999 3C13.9 3 17 6.1 17 10C17 13.9 13.9 17 9.99999 17Z" fill="currentColor"></path>
                            </svg>
                        </button>
                        <input class="pl-2 py-3 text-sm text-gray-500" type="text" placeholder="Type to search..." @bind="name">
                    </div>
                </div>
                <div class="p-4 mb-6 bg-white shadow overflow-y-auto rounded">
                    <table class="table-auto w-full">
                        <thead>
                        <tr class="text-xs text-gray-500 text-left">
                            <th class="pb-3 font-medium">Company Name</th>
                            <th class="pb-3 font-medium">CVR</th>
                            <th class="pb-3 font-medium">Description</th>
                            <th class="pb-3 font-medium">Phone Number</th>
                            <th class="pb-3 font-medium">City</th>
                            <th class="pb-3 font-medium">Street</th>
                            <th class="pb-3 font-medium">Street Number</th>
                            <th class="pb-3 font-medium">Post Code</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var provider in providers.Content.Providers.Select((value, i) => new {value, i}))
                        {
                            <tr @onclick="() => OpenExperienceView(provider.value)" class="@(provider.i % 2 == 0 ? "bg-gray-50" : "bg-white") cursor-pointer hover:bg-indigo-50 text-xs">
                                <td class="py-3 px-4">
                                    <p class="font-medium align-middle">@provider.value.CompanyName</p>
                                </td>
                                <td class="py-3 px-4">
                                    <p class="font-medium align-middle">@provider.value.Cvr</p>
                                </td>
                                <td class="py-3 px-4">
                                    <p class="font-medium align-middle">@provider.value.Description</p>
                                </td>
                                <td class="py-3 px-4">
                                    <p class="font-medium align-middle">@provider.value.PhoneNumber</p>
                                </td>
                                <td class="py-3 px-4">
                                    <p class="font-medium align-middle">@provider.value.Address.City</p>
                                </td>
                                <td class="py-3 px-4">
                                    <p class="font-medium align-middle">@provider.value.Address.Street</p>
                                </td>
                                <td class="py-3 px-4">
                                    <p class="font-medium align-middle">@provider.value.Address.StreetNumber</p>
                                </td>
                                <td class="py-3 px-4">
                                    <p class="font-medium align-middle">@provider.value.Address.PostCode</p>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
                <div class="flex flex-wrap -mx-4 items-center justify-end">
                    <div class="w-full lg:w-auto px-4 flex items-center justify-center">
                        @foreach(var index in Enumerable.Range(1, providers.TotalPages))
                        {
                            <a class="cursor-pointer inline-flex mr-3 items-center justify-center w-8 h-8 text-xs @(providers.PageNumber+1 == index ? "text-white bg-indigo-500":"text-gray-500 bg-white") border border-gray-300 hover:bg-indigo-50 hover:text-gray-500 rounded" @onclick="() => GetPageElements(index)">@index</a>
                        }
                    </div>
                </div>
            </div>
        </section>
    }
</div>


@code {
    private string name = "";
    private Page<ProviderList> providers = new();
    private int pageNumber = 0;

    protected override async Task OnInitializedAsync()
    {
        providers = await ProviderService.GetAllProviders(pageNumber);
    }

    private void OpenExperienceView(Provider provider)
    {
        NavigationManager.NavigateTo($"/providers/{provider.Id}/experiences");
    }

    private async Task FetchFilteredProviders()
    {
        providers = await ProviderService.GetAllProvidersByNameAsync(name, pageNumber);
    }
    
    private async Task GetPageElements(int i)
    {
        if (string.IsNullOrEmpty(name))
        {
            providers = await ProviderService.GetAllProviders(i-1);
        }
        else
        {
            providers = await ProviderService.GetAllProvidersByNameAsync(name, i-1);
        }
    }
}