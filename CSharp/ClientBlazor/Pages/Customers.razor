@page "/customers"
@using GrpcFileGeneration.Models
@using CustomerList = ClientBlazor.Models.Orders.CustomerList
@using ClientBlazor.Models
@using ClientBlazor.Services.Customers

@inject ICustomerService CustomerService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "administrator")]

@if (customers == null)
{
    <p class="text-center">
        <em>Loading...</em>
    </p>
}
else if (!customers.Content.Customers.Any())
{
    <p class="text-center">
        <em>No Customers currenlty exist.</em>
    </p>
}
else
{
    <section class="">
        <div class="container px-4 mx-auto">
            <div class="hidden my-2 lg:flex lg:w-auto lg:space-x-10">
                <div class="hidden lg:flex items-center mr-auto pl-4 border rounded">
                    <button class="mr-2 text-gray-200 hover:text-gray-300" @onclick="FetchFilteredCustomers">
                        <svg class="h-5 w-5" viewBox="0 0 21 21" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M20.7 19.3L17 15.6C20.1 11.7 19.5 6 15.6 2.9C11.7 -0.2 5.99999 0.5 2.89999 4.3C-0.200006 8.2 0.499995 13.9 4.29999 17C7.59999 19.6 12.3 19.6 15.6 17L19.3 20.7C19.7 21.1 20.3 21.1 20.7 20.7C21.1 20.3 21.1 19.7 20.7 19.3ZM9.99999 17C6.09999 17 2.99999 13.9 2.99999 10C2.99999 6.1 6.09999 3 9.99999 3C13.9 3 17 6.1 17 10C17 13.9 13.9 17 9.99999 17Z" fill="currentColor"></path>
                        </svg>
                    </button>
                    <input class="pl-2 py-3 text-sm text-gray-500" type="text" placeholder="Type to search..." @bind="name">
                </div>
            </div>
            <div class="p-4 mb-6 bg-white overflow-y-auto shadow rounded">
                <table class="table-auto w-full">
                    <thead>
                    <tr class="text-xs text-gray-500 text-left">
                        <th class="pb-3 font-medium">Customer Name</th>
                        <th class="pb-3 font-medium">Phone number</th>
                        <th class="pb-3 font-medium">City</th>
                        <th class="pb-3 font-medium">Action</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var customer in customers.Content.Customers.Select((value, i) => new {value, i}))
                    {
                        <tr class="text-xs @(customer.i % 2 != 0 ? "bg-white-50" : "bg-gray-50") hover:bg-indigo-50">
                            <td class="cursor-pointer py-3 px-4" @onclick="() => LoadCustomerOrders(customer.value)">
                                <p class="font-medium align-middle">@customer.value.FirstName @customer.value.LastName</p>
                            </td>
                            <td class="py-3 px-4">
                                <p class="font-medium align-middle">@customer.value.PhoneNumber</p>
                            </td>
                            <td class="py-3 px-4">
                                <p class="font-medium align-middle">@customer.value.Address.City</p>
                            </td>
                            <td>
                                <a class="inline-block" href="" @onclick="() => DeleteCustomer(customer.value)">
                                    <svg width="20" height="20" viewbox="0 0 20 20" fill="none"
                                         xmlns="http://www.w3.org/2000/svg">
                                        <path d="M8.33333 15C8.55435 15 8.76631 14.9122 8.92259 14.7559C9.07887 14.5996 9.16667 14.3877 9.16667 14.1667V9.16666C9.16667 8.94564 9.07887 8.73368 8.92259 8.5774C8.76631 8.42112 8.55435 8.33332 8.33333 8.33332C8.11232 8.33332 7.90036 8.42112 7.74408 8.5774C7.5878 8.73368 7.5 8.94564 7.5 9.16666V14.1667C7.5 14.3877 7.5878 14.5996 7.74408 14.7559C7.90036 14.9122 8.11232 15 8.33333 15ZM16.6667 4.99999H13.3333V4.16666C13.3333 3.50362 13.0699 2.86773 12.6011 2.39889C12.1323 1.93005 11.4964 1.66666 10.8333 1.66666H9.16667C8.50363 1.66666 7.86774 1.93005 7.3989 2.39889C6.93006 2.86773 6.66667 3.50362 6.66667 4.16666V4.99999H3.33333C3.11232 4.99999 2.90036 5.08779 2.74408 5.24407C2.5878 5.40035 2.5 5.61231 2.5 5.83332C2.5 6.05434 2.5878 6.2663 2.74408 6.42258C2.90036 6.57886 3.11232 6.66666 3.33333 6.66666H4.16667V15.8333C4.16667 16.4964 4.43006 17.1322 4.8989 17.6011C5.36774 18.0699 6.00363 18.3333 6.66667 18.3333H13.3333C13.9964 18.3333 14.6323 18.0699 15.1011 17.6011C15.5699 17.1322 15.8333 16.4964 15.8333 15.8333V6.66666H16.6667C16.8877 6.66666 17.0996 6.57886 17.2559 6.42258C17.4122 6.2663 17.5 6.05434 17.5 5.83332C17.5 5.61231 17.4122 5.40035 17.2559 5.24407C17.0996 5.08779 16.8877 4.99999 16.6667 4.99999ZM8.33333 4.16666C8.33333 3.94564 8.42113 3.73368 8.57741 3.5774C8.73369 3.42112 8.94565 3.33332 9.16667 3.33332H10.8333C11.0543 3.33332 11.2663 3.42112 11.4226 3.5774C11.5789 3.73368 11.6667 3.94564 11.6667 4.16666V4.99999H8.33333V4.16666ZM14.1667 15.8333C14.1667 16.0543 14.0789 16.2663 13.9226 16.4226C13.7663 16.5789 13.5543 16.6667 13.3333 16.6667H6.66667C6.44565 16.6667 6.23369 16.5789 6.07741 16.4226C5.92113 16.2663 5.83333 16.0543 5.83333 15.8333V6.66666H14.1667V15.8333ZM11.6667 15C11.8877 15 12.0996 14.9122 12.2559 14.7559C12.4122 14.5996 12.5 14.3877 12.5 14.1667V9.16666C12.5 8.94564 12.4122 8.73368 12.2559 8.5774C12.0996 8.42112 11.8877 8.33332 11.6667 8.33332C11.4457 8.33332 11.2337 8.42112 11.0774 8.5774C10.9211 8.73368 10.8333 8.94564 10.8333 9.16666V14.1667C10.8333 14.3877 10.9211 14.5996 11.0774 14.7559C11.2337 14.9122 11.4457 15 11.6667 15Z"
                                              fill="#E85444">
                                        </path>
                                    </svg>
                                </a>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
            <div class="flex flex-wrap mt-4 items-center justify-end">
                <div class="w-full lg:w-auto px-4 flex items-center justify-center">
                    @foreach(var index in Enumerable.Range(1, customers.TotalPages))
                    {
                        <a class="cursor-pointer inline-flex mr-3 items-center justify-center w-8 h-8 text-xs @(customers.PageNumber+1 == index ? "text-white bg-indigo-500":"text-gray-500 bg-white") border border-gray-300 hover:bg-indigo-50 hover:text-gray-500 rounded" @onclick="() => GetPageElements(index)">@index</a>
                    }
                </div>
            </div>
        </div>
    </section>
}

@code {
    private string name = "";
    private Page<CustomerList> customers;
    private int pageNumber = 0;
    
    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerService.GetAllCustomersAsync(pageNumber);
    }

    private async Task DeleteCustomer(Customer customer)
    {
        await CustomerService.DeleteCustomer(customer);
    }

    private async Task LoadCustomerOrders(Customer customer)
    {
        NavigationManager.NavigateTo($"/customers/{customer.Id}/orders");
    }

    private async Task FetchFilteredCustomers()
    {
        pageNumber = 0;
        customers = await CustomerService.GetAllCustomersByNameAsync(name, pageNumber);
    }

    private async Task GetPageElements(int i)
    {
        pageNumber = i-1;
        if (string.IsNullOrEmpty(name))
        {
            customers = await CustomerService.GetAllCustomersAsync(pageNumber);
        }
        else
        {
            customers = await CustomerService.GetAllCustomersByNameAsync(name, pageNumber);
        }
    }

}